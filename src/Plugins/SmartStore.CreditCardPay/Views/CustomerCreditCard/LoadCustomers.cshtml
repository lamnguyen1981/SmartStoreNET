@using SmartStore.CreditCardPay.Models
@model PaymentMethodSearchCondition
@using Telerik.Web.Mvc.UI;
@using System.Globalization;
@{
    Layout = "_AdminLayout";
    ViewBag.Title = T("Plugins.FriendlyName.SmartStore.CreditCardPay").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <i class="fal fa-fw fa-xl fa-credit-card"></i>
            @T("Admin.Customers.Customers")
        </div>
        <div class="options">
            @{ Html.RenderWidget("admin_button_toolbar_before"); }

            <button type="button" class="btn btn-outline-secondary btn-toggle-filter" data-toggle="button" aria-pressed="false">
                <i class="fa fa-filter"></i>
                <span>@T("Common.Filter")</span>
                <i class="fa fa-angle-double-down"></i>
            </button>

            

            @{ Html.RenderWidget("admin_button_toolbar_after"); }
        </div>
    </div>

    <div class="row mt-3 grid-filter" style="display: none">
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.FirstName)
            @Html.TextBoxFor(model => Model.FirstName, new { @class = "form-control sf" })
        </div>

        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.LastName)
            @Html.TextBoxFor(model => Model.LastName, new { @class = "form-control sf" })
        </div>

        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.Email)
            @Html.TextBoxFor(model => Model.Email, new { @class = "form-control sf" })
        </div>



        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.CardAlias)
            @Html.TextBoxFor(model => Model.CardAlias, new { @class = "form-control sf" })
        </div>



        

        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.CardMask)
            @Html.EditorFor(model => Model.CardMask, new { @class = "form-control sf", @maxlength = "10", @type = "number" })
        </div>

        @{ 

            var cardType = new List<SelectListItem>();
            cardType.Add(new SelectListItem { Text = "Credit Card", Value = "Credit Card" });
            cardType.Add(new SelectListItem { Text = "Debit Card", Value = "Debit Card" });



            <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
                <div>
                    @Html.SmartLabelFor(model => model.CardType)
                </div>
                <div class="form-row">
                    <div class="col">
                        @Html.DropDownListFor(model => Model.CardType, cardType)
                    </div>
                   
                </div>
            </div>
        }

        <div class="col-sm-6 col-lg-4 col-xl-3 form-group ml-auto">
            <button type="submit" id="search-customers" name="search-customers" class="btn btn-warning btn-block">
                <span>@T("Admin.Common.ApplyFilter")</span>
            </button>
        </div>
    </div>

    

    @(Html.Telerik().Grid<PaymentMethodResponse>()
        .Name("customers-grid")
        .ClientEvents(events => events
            .OnDataBinding("onDataBinding")
            .OnDataBound("onDataBound")
            .OnRowDataBound("onRowDataBound"))
        .Columns(columns =>
        {
            //columns.Bound(x => x.PaymentProfileId)
            //    .ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= PaymentProfileId #>' class='checkboxGroups'/>")
            //    .Title("<input id='mastercheckbox' type='checkbox'/>")
            //    .HtmlAttributes(new { style = "text-align:center" })
            //    .HeaderHtmlAttributes(new { style = "text-align:center" });

            columns.Bound(x => x.CardHolderName);


            columns.Bound(x => x.Email);
            columns.Bound(x => x.CardAlias);
            columns.Bound(x => x.CardMask);
            columns.Bound(x => x.ExpireDate);
            columns.Bound(x => x.CardType);

            columns.Bound(x => x.PaymentProfileId)
                .Centered()
                .ClientTemplate("<a href=\"customercreditcard/DeleteCard/<#= PaymentProfileId #>\" class=\"t-button\">" + T("Admin.Common.Delete").Text + "</a>")
                .Title(String.Empty)
                .HtmlAttributes(new { align = "right", @class = "omega" });

            columns.Bound(x => x.PaymentProfileId)
                .Centered()
                .ClientTemplate("<a href=\"customercreditcard/Charge/<#= PaymentProfileId #>\" class=\"t-button\">" + T("Plugins.CreditCard.Charge").Text + "</a>")
                .Title(String.Empty)
                .HtmlAttributes(new { align = "right", @class = "omega" });
        })
        .Pageable(settings => settings.PageSize(Model.PageSize).Position(GridPagerPosition.Both))
        .DataBinding(dataBinding => dataBinding.Ajax().Select("LoadCustomers", "CustomerCreditCard"))
        .PreserveGridState()
        .EnableCustomBinding(true))

    <script>
		@*Used by widget SmartStore.CommonExportProviders::ExportButtonsGeneral.cshtml*@
		var selectedIds = [];

		$(function () {

			// Filter toggler.
			$('.btn-toggle-filter').on('click', function (e) {
				$('.grid-filter').slideToggle({ duration: 200, easing: 'ease-in-out' });
			});

			// Search button.
			$('#search-customers').click(function () {
				var grid = $('#customers-grid').data('tGrid');
				grid.currentPage = 1; //new search. Set page size to 1
				grid.ajaxRequest();
				return false;
			});

			$(".form-control.sf").on("keydown", function (e) {
				if (e.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});

			$('#mastercheckbox').click(function () {
				$('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
			});

			// Wire up checkboxes.
			$(document).on('change', '#customers-grid input[type=checkbox][id!=mastercheckbox]', function (e) {
				var $check = $(this);
				if ($check.is(":checked") == true) {
					var checked = jQuery.inArray($check.val(), selectedIds);
					if (checked == -1) {
						//add id to selectedIds.
						selectedIds.push($check.val());
					}
				}
				else {
					var checked = jQuery.inArray($check.val(), selectedIds);
					if (checked > -1) {
						//remove id from selectedIds.
						selectedIds = $.grep(selectedIds, function (item, index) {
							return item != $check.val();
						});
					}
				}
				updateMasterCheckbox();
			});
		});

		function onDataBound() {
			$('#customers-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
				var currentId = $(this).val();
				var checked = jQuery.inArray(currentId, selectedIds);
				// Set checked based on if current checkbox's value is in selectedIds.
				$(this).attr('checked', checked > -1);
			});

			//updateMasterCheckbox();
        }

        function onRowDataBound(e) {
		    if (!e.dataItem.Active) {
			    $(e.row).find('td').wrapInner('<span class="muted" />');
		    }
        }

		function updateMasterCheckbox() {
			var numChkBoxes = $('#customers-grid input[type=checkbox][id!=mastercheckbox]').length;
			var numChkBoxesChecked = $('#customers-grid input[type=checkbox][checked][id!=mastercheckbox]').length;
			$('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
		}

		function onDataBinding(e) {
			e.data = {
                FirstName: $('#@Html.FieldIdFor(model => model.FirstName)').val(),
                LastName: $('#@Html.FieldIdFor(model => model.LastName)').val(),
                Email: $('#@Html.FieldIdFor(model => model.Email)').val(),
                CardAlias: $('#@Html.FieldIdFor(model => model.CardAlias)').val(),
                CardType: $('#@Html.FieldIdFor(model => model.CardType)').val(),
                CardMask: $('#@Html.FieldIdFor(model => model.CardMask)').val(),

			};

			var customerGrid = $('#customers-grid');
			if (customerGrid.data('init-loaded')) {

			}
			else {
				customerGrid.data('init-loaded', true);

			}
		}
    </script>
}